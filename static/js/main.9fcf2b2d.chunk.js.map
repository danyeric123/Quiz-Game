{"version":3,"sources":["services/apiServices.ts","components/Header.tsx","components/QuestionCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","Header","QuestionCard","question","answers","callback","questionNum","totalQuestions","userAnswer","dangerouslySetInnerHTML","__html","map","answer","className","disabled","onClick","getQuizQuestions","amount","difficulty","a","fetch","json","data","results","shuffleAnswers","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","id","correct","undefined","e","currentTarget","innerText","console","log","prev","attempt","correctAnswer","length","nextNum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fcf2b2d.chunk.js","sourcesContent":["// The Question type has two snake case fields because the API returns it that way. Hence, I was simply conforming to the data I get back\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type Questions = Question & { answers: string[] };\n\nconst BASE_URL = \"https://opentdb.com/api.php\";\n\nexport const getQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n): Promise<Questions[]> => {\n  const data = await (\n    await fetch(\n      `${BASE_URL}?amount=${amount}&difficulty=${difficulty}&type=multiple`\n    )\n  ).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleAnswers([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n\nconst shuffleAnswers = (answers: string[]): string[] => {\n  return [...answers].sort(() => Math.random() - 0.5);\n};\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <section>\n      <h1>Trivia Game</h1>\n      <small>Written in React with TypeScript</small>\n    </section>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Attempt } from \"../App\";\n\ninterface Props {\n  question: string;\n  answers: string[];\n  callback: any;\n  userAnswer: Attempt | undefined;\n  questionNum: number;\n  totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  questionNum,\n  totalQuestions,\n  userAnswer,\n}) => {\n  return (\n    <section>\n      <h1>\n        Question: {questionNum}/ {totalQuestions}\n      </h1>\n      <h1 dangerouslySetInnerHTML={{ __html: question }} />\n      <ul>\n        {answers.map((answer) => (\n          <li>\n            <button\n              className=\"choice\"\n              key={answer}\n              disabled={userAnswer ? true : false}\n              onClick={callback}\n            >\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default QuestionCard;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport {\n  getQuizQuestions,\n  Difficulty,\n  Questions,\n} from \"./services/apiServices\";\n\nconst totalQuestions = 10;\n\nexport interface Attempt {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<Questions[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<Attempt[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await getQuizQuestions(\n      totalQuestions,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.innerText;\n      const correct = questions[number].correct_answer === answer;\n      console.log(answer);\n      console.log(correct);\n      console.log(questions[number].correct_answer);\n      if (correct) {\n        setScore((prev: number) => prev + 1);\n      }\n      const attempt: Attempt = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev: Attempt[]) => [...prev, attempt]);\n    }\n  };\n\n  const nextQuestion = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const nextNum = number + 1;\n    if (nextNum === totalQuestions) {\n      setGameOver(true);\n    } else {\n      setNumber(nextNum);\n    }\n  };\n\n  return (\n    <div id=\"container\">\n      <Header />\n      {gameOver && (\n        <button onClick={startTrivia} id=\"start-btn\">\n          Start\n        </button>\n      )}\n      {!gameOver && (\n        <section>\n          <h1 id={userAnswers[number]?.correct ? \"won\" : \"lost\"}>\n            {userAnswers[number] &&\n              (!userAnswers[number]?.correct ? \"Wrong\" : \"Correct!\")}\n          </h1>\n          <p>Score: {score}</p>\n        </section>\n      )}\n      {loading && <p>Loading Questions...</p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNum={number + 1}\n          totalQuestions={totalQuestions}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== totalQuestions && (\n          <button onClick={nextQuestion} id=\"next\">\n            Next\n          </button>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}